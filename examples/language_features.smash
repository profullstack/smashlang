// language_features.smash - Testing new language features

// Import standard library
import "std";

// Function to test various language features
fn testLanguageFeatures() {
  // String literals
  const doubleQuoted = "This is a double-quoted string";
  const singleQuoted = 'This is a single-quoted string';
  const templateLiteral = `This is a template literal`;
  
  // Comparison operators
  const a = 10;
  const b = 20;
  
  if (a < b) {
    std.print("a is less than b");
  }
  
  if (a <= b) {
    std.print("a is less than or equal to b");
  }
  
  if (b > a) {
    std.print("b is greater than a");
  }
  
  if (b >= a) {
    std.print("b is greater than or equal to a");
  }
  
  if (a == 10) {
    std.print("a equals 10");
  }
  
  if (a != 20) {
    std.print("a is not equal to 20");
  }
  
  // Logical operators
  const c = true;
  const d = false;
  
  if (c && !d) {
    std.print("c is true AND d is false");
  }
  
  if (c || d) {
    std.print("c is true OR d is true");
  }
  
  // Bitwise operators
  const e = 5;  // 101 in binary
  const f = 3;  // 011 in binary
  
  const bitwiseAnd = e & f;  // 001 = 1
  const bitwiseOr = e | f;   // 111 = 7
  const bitwiseXor = e ^ f;  // 110 = 6
  
  std.print(`Bitwise AND: ${bitwiseAnd}`);
  std.print(`Bitwise OR: ${bitwiseOr}`);
  std.print(`Bitwise XOR: ${bitwiseXor}`);
  
  // Ternary operator
  const max = a > b ? a : b;
  std.print(`Maximum value: ${max}`);
  
  return "All tests completed";
}

// Main function
fn main() {
  std.print("Testing new language features...");
  const result = testLanguageFeatures();
  std.print(result);
  return 0;
}

// Call main
main();
