// SmashLang String Pattern Matching Example

// Basic string pattern matching
let text = "Hello, world! Hello again.";
print("Original text:", text);

// Simple substring search
let containsHello = text.includes("Hello");
print("Contains 'Hello':", containsHello);

// Case-insensitive search (convert to lowercase first)
let lowerText = text.toLowerCase();
let containsHelloLower = lowerText.includes("hello");
print("Contains 'hello' (case-insensitive):", containsHelloLower);

// String replacement
let replaced = text.replace("Hello", "Hi");
print("After single replacement:", replaced);

// Global replacement (need to implement manually)
let globalReplaced = text;
let searchTerm = "Hello";
let replacement = "Hi";

// Simple manual implementation of global replace
while (globalReplaced.includes(searchTerm)) {
    globalReplaced = globalReplaced.replace(searchTerm, replacement);
}

print("After global replacement:", globalReplaced);

// String splitting
let sentence = "This is a test sentence with multiple words.";
let words = sentence.split(" ");
print("Words in sentence:", words);

// Email validation using string methods
let emailText = "Contact us at info@example.com or support@example.org";
print("Email text:", emailText);

// Simple email validation (contains @ and .)
let hasAtSign = emailText.includes("@");
let hasDot = emailText.includes(".");
let atBeforeDot = emailText.indexOf("@") < emailText.lastIndexOf(".");
let isValid = hasAtSign && hasDot && atBeforeDot;

print("Email contains @:", hasAtSign);
print("Email contains .:", hasDot);
print("@ is before last .:", atBeforeDot);
print("Is potentially valid email format:", isValid);

// Extract part of the email text
let atPos = emailText.indexOf("@");
let dotPos = emailText.lastIndexOf(".");

// Get the domain part (between @ and end)
let domainPart = emailText.substring(atPos + 1);
print("Domain part:", domainPart);

// Get the TLD (after last dot)
let tld = emailText.substring(dotPos + 1);
print("Top-level domain:", tld);
