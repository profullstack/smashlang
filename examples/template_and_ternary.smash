// Test file for template literals and ternary operators in SmashLang

// Basic variables for testing
let name = "World";
let doubleQuoted = "Double quoted string";
let singleQuoted = 'Single quoted string';

// Template literals
let greeting = `Hello, ${name}!`;
print(greeting);

// Template literals with expressions
let stringLength = 24; // Manually set length since property access isn't supported yet
let templateLiteral = `This is a template literal with ${stringLength} characters`;
print(templateLiteral);

// Nested template literals
let innerTemplate = `Inner ${name}`;
let nested = `Outer ${innerTemplate}`;
print(nested);

// Ternary operators
let a = 10;
let b = 5;
// First let's assign the comparison result to a variable
let isGreater = a > b;
// Then use the ternary operator
let max = isGreater ? a : b;
print(`Maximum value: ${max}`);

// Simple ternary operators
let score = 85;
let isB = score >= 80;
let grade = isB ? 'B' : 'F';
print(`Score: ${score}, Grade: ${grade}`);

// Combining ternary operators and template literals
let isLoggedIn = true;
let username = "john_doe";
let welcomeMessage = `Welcome back, ${username}!`;
let loginMessage = 'Please log in';
let message = isLoggedIn ? welcomeMessage : loginMessage;
print(message);

// Functions with template literals
fn formatName(first, last) {
  return `${first} ${last}`;
}
let fullName = formatName("John", "Doe");
print(fullName);

// Functions with ternary operators
fn checkAge(age) {
  let isAdult = age >= 18;
  return isAdult ? "Adult" : "Minor";
}
print(`Status: ${checkAge(20)}`);
print(`Status: ${checkAge(15)}`);
