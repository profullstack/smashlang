/**
 * Basic Camera Package Example
 * 
 * This example demonstrates the basic functionality of the camera package,
 * including device enumeration, photo capture, and video recording.
 */

import { camera, CameraStream } from "../src/index.smash";

// Main async function to run all examples
async function runExamples() {
  console.log("=== Camera Package Basic Examples ===\n");
  
  // Check if camera is available
  console.log("Checking if camera is available...");
  const isAvailable = await camera.isAvailable();
  if (!isAvailable) {
    console.error("Camera is not available on this device");
    return;
  }
  console.log("Camera is available");
  console.log("---");
  
  // Request camera permission
  console.log("Requesting camera permission...");
  const permission = await camera.requestPermission();
  if (!permission) {
    console.error("Camera permission denied");
    return;
  }
  console.log("Camera permission granted");
  console.log("---");
  
  // List available cameras
  console.log("Listing available cameras...");
  const devices = await camera.getDevices();
  console.log(`Found ${devices.length} camera(s):`);
  for (const device of devices) {
    console.log(`- ${device.label} (${device.id})`);
    console.log(`  Facing mode: ${device.facingMode}`);
    console.log(`  Is front-facing: ${device.isFrontFacing}`);
    console.log(`  Is back-facing: ${device.isBackFacing}`);
  }
  console.log("---");
  
  // Select the first camera (usually the default)
  const deviceId = devices[0].id;
  console.log(`Selected camera: ${devices[0].label} (${deviceId})`);
  
  // Create a camera stream
  console.log("Creating camera stream...");
  const cameraStream = new CameraStream(deviceId, {
    width: 1280,
    height: 720,
    frameRate: 30,
    facingMode: 'user' // 'user' for front camera, 'environment' for back camera
  });
  
  // Register event listeners
  cameraStream.on('start', () => {
    console.log("Event: Camera started");
  });
  
  cameraStream.on('stop', () => {
    console.log("Event: Camera stopped");
  });
  
  cameraStream.on('photoTaken', (data) => {
    console.log(`Event: Photo taken (${data.photo.width}x${data.photo.height})`);
  });
  
  cameraStream.on('recordingStart', (data) => {
    console.log(`Event: Recording started at ${new Date(data.timestamp).toISOString()}`);
  });
  
  cameraStream.on('recordingStop', (data) => {
    console.log(`Event: Recording stopped (${data.videoFile.duration}ms, ${data.videoFile.size} bytes)`);
  });
  
  // Start the camera
  console.log("Starting camera...");
  await cameraStream.start();
  console.log("Camera started");
  console.log("---");
  
  // Get camera capabilities
  console.log("Getting camera capabilities...");
  const capabilities = await cameraStream.getCapabilities();
  console.log("Available resolutions:", capabilities.resolutions);
  console.log("Available frame rates:", capabilities.frameRates);
  console.log("Zoom range:", capabilities.zoom);
  console.log("Focus modes:", capabilities.focusModes);
  console.log("---");
  
  // Configure camera settings
  console.log("Configuring camera settings...");
  await cameraStream.configure({
    zoom: 1.5,
    focusMode: 'continuous',
    whiteBalance: 'auto',
    flashMode: 'auto'
  });
  console.log("Camera configured");
  console.log("---");
  
  // Take a photo
  console.log("Taking a photo...");
  const photo = await cameraStream.takePhoto({
    format: 'jpeg',
    quality: 0.9
  });
  console.log(`Photo taken: ${photo.width}x${photo.height}, ${photo.size} bytes, format: ${photo.format}`);
  
  // Save the photo to a file
  console.log("Saving photo to file...");
  const photoPath = await photo.saveToFile("./photo.jpg");
  console.log(`Photo saved to: ${photoPath}`);
  
  // Convert photo to Base64
  console.log("Converting photo to Base64...");
  const base64 = await photo.toBase64();
  console.log(`Base64 photo (first 50 chars): ${base64.substring(0, 50)}...`);
  console.log("---");
  
  // Apply a filter to the camera stream
  console.log("Applying a filter to the camera stream...");
  await cameraStream.applyFilter("grayscale");
  console.log("Filter applied");
  
  // Take another photo with the filter applied
  console.log("Taking a photo with filter...");
  const filteredPhoto = await cameraStream.takePhoto();
  console.log(`Filtered photo taken: ${filteredPhoto.width}x${filteredPhoto.height}`);
  
  // Process a photo with additional filters
  console.log("Processing photo with additional filters...");
  const processedPhoto = await photo.process([
    { filter: "brightness", options: { level: 1.2 } },
    { filter: "contrast", options: { level: 1.1 } }
  ]);
  console.log(`Processed photo: ${processedPhoto.width}x${processedPhoto.height}`);
  
  // Remove filters
  console.log("Removing filters...");
  await cameraStream.removeFilters();
  console.log("Filters removed");
  console.log("---");
  
  // Start recording a video
  console.log("Starting video recording...");
  await cameraStream.startRecording({
    format: 'mp4',
    quality: 'high',
    maxDuration: 5000 // 5 seconds
  });
  console.log("Recording started (will stop after 5 seconds)");
  
  // Wait for recording to complete
  await new Promise(resolve => setTimeout(resolve, 5500));
  
  // If recording is still active, stop it manually
  if (cameraStream.isRecording) {
    console.log("Stopping recording manually...");
    const videoFile = await cameraStream.stopRecording();
    console.log(`Recording stopped: ${videoFile.duration}ms, ${videoFile.size} bytes`);
    
    // Save the video to a file
    console.log("Saving video to file...");
    const videoPath = await videoFile.saveToFile("./video.mp4");
    console.log(`Video saved to: ${videoPath}`);
    
    // Get a thumbnail from the video
    console.log("Extracting thumbnail from video...");
    const thumbnail = await videoFile.getThumbnail(1000); // 1 second into the video
    console.log(`Thumbnail extracted: ${thumbnail.width}x${thumbnail.height}`);
  }
  console.log("---");
  
  // Stop the camera
  console.log("Stopping camera...");
  cameraStream.stop();
  console.log("Camera stopped");
  console.log("---");
  
  console.log("All examples completed!");
}

// Run the examples
runExamples().catch(error => {
  console.error("Error running examples:", error);
});