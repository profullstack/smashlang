// advanced.smash - Advanced example of using the package

import "package_name";
import "std";  // Import standard library for additional functionality

// Advanced usage example demonstrating more complex features
async fn advancedExample() {
  print("=== Advanced Package Example ===");
  
  try {
    // Example of using nested objects/functions
    const nestedResult = package_name.nestedObject.nestedFunction();
    print("Nested fn result:", nestedResult);
    
    // Example of chaining operations
    const chainedResult = package_name.nestedObject
      .anotherFunction()
      .transform()
      .process();
    print("Chained operations result:", chainedResult);
    
    // Example of async operations
    print("Starting async operation...");
    const asyncResult = await package_name.asyncFunction();
    print("Async operation completed with result:", asyncResult);
    
    // Example of error handling
    try {
      package_name.functionThatMightFail();
    } catch (error) {
      print("Caught expected error:", error.message);
    }
    
    // Example of using with configuration options
    const configuredInstance = new package_name.ClassName({
      option1: "custom value",
      option2: 42,
      debug: true
    });
    
    const configuredResult = await configuredInstance.processWithOptions();
    print("Configured instance result:", configuredResult);
    
    print("Advanced example completed successfully!");
  } catch (error) {
    console.error("Error in advanced example:", error.message);
  }
}

// Run the example
advancedExample().catch(error => {
  console.error("Unhandled error:", error);
});
