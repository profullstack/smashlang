/**
 * SmashLang Math Package
 * 
 * A comprehensive mathematics library for SmashLang applications.
 * Provides basic and advanced mathematical functions, constants,
 * and utilities for numerical computations.
 */

// Mathematical constants
export const PI = Math.PI;
export const E = Math.E;
export const LN2 = Math.LN2;
export const LN10 = Math.LN10;
export const LOG2E = Math.LOG2E;
export const LOG10E = Math.LOG10E;
export const SQRT1_2 = Math.SQRT1_2;
export const SQRT2 = Math.SQRT2;
export const EPSILON = Number.EPSILON || 2.220446049250313e-16;
export const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
export const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
export const MAX_VALUE = Number.MAX_VALUE;
export const MIN_VALUE = Number.MIN_VALUE;
export const INFINITY = Infinity;
export const NaN = Number.NaN;

/**
 * Basic arithmetic operations
 */

/**
 * Add two or more numbers
 * @param {...number} args - Numbers to add
 * @returns {number} Sum of the numbers
 */
export fn add(...args) {
  return args.reduce((sum, value) => sum + value, 0);
}

/**
 * Subtract numbers from the first argument
 * @param {...number} args - Numbers to subtract
 * @returns {number} Result of the subtraction
 */
export fn subtract(...args) {
  if (args.length === 0) return 0;
  if (args.length === 1) return args[0];
  
  return args.slice(1).reduce((result, value) => result - value, args[0]);
}

/**
 * Multiply two or more numbers
 * @param {...number} args - Numbers to multiply
 * @returns {number} Product of the numbers
 */
export fn multiply(...args) {
  return args.reduce((product, value) => product * value, 1);
}

/**
 * Divide the first argument by the rest
 * @param {...number} args - Numbers to divide
 * @returns {number} Result of the division
 */
export fn divide(...args) {
  if (args.length === 0) return 0;
  if (args.length === 1) return args[0];
  
  return args.slice(1).reduce((result, value) => {
    if (value === 0) {
      throw new Error("Division by zero");
    }
    return result / value;
  }, args[0]);
}

/**
 * Calculate the modulo of two numbers
 * @param {number} a - Dividend
 * @param {number} b - Divisor
 * @returns {number} Remainder of the division
 */
export fn mod(a, b) {
  if (b === 0) {
    throw new Error("Modulo by zero");
  }
  
  return a % b;
}

/**
 * Calculate the power of a number
 * @param {number} base - Base
 * @param {number} exponent - Exponent
 * @returns {number} Base raised to the power of exponent
 */
export fn pow(base, exponent) {
  return Math.pow(base, exponent);
}

/**
 * Calculate the square root of a number
 * @param {number} x - Number
 * @returns {number} Square root of the number
 */
export fn sqrt(x) {
  if (x < 0) {
    throw new Error("Cannot calculate square root of negative number");
  }
  
  return Math.sqrt(x);
}

/**
 * Calculate the cube root of a number
 * @param {number} x - Number
 * @returns {number} Cube root of the number
 */
export fn cbrt(x) {
  return Math.cbrt(x);
}

/**
 * Calculate the absolute value of a number
 * @param {number} x - Number
 * @returns {number} Absolute value of the number
 */
export fn abs(x) {
  return Math.abs(x);
}

/**
 * Round a number to the nearest integer
 * @param {number} x - Number
 * @returns {number} Rounded number
 */
export fn round(x) {
  return Math.round(x);
}

/**
 * Round a number down to the nearest integer
 * @param {number} x - Number
 * @returns {number} Rounded down number
 */
export fn floor(x) {
  return Math.floor(x);
}

/**
 * Round a number up to the nearest integer
 * @param {number} x - Number
 * @returns {number} Rounded up number
 */
export fn ceil(x) {
  return Math.ceil(x);
}

/**
 * Truncate the decimal part of a number
 * @param {number} x - Number
 * @returns {number} Truncated number
 */
export fn trunc(x) {
  return Math.trunc(x);
}

/**
 * Get the sign of a number
 * @param {number} x - Number
 * @returns {number} 1 if positive, -1 if negative, 0 if zero
 */
export fn sign(x) {
  return Math.sign(x);
}

/**
 * Check if a number is an integer
 * @param {number} x - Number
 * @returns {boolean} True if the number is an integer
 */
export fn isInteger(x) {
  return Number.isInteger(x);
}

/**
 * Check if a number is a safe integer
 * @param {number} x - Number
 * @returns {boolean} True if the number is a safe integer
 */
export fn isSafeInteger(x) {
  return Number.isSafeInteger(x);
}

/**
 * Check if a value is NaN
 * @param {*} x - Value
 * @returns {boolean} True if the value is NaN
 */
export fn isNaN(x) {
  return Number.isNaN(x);
}

/**
 * Check if a value is finite
 * @param {*} x - Value
 * @returns {boolean} True if the value is finite
 */
export fn isFinite(x) {
  return Number.isFinite(x);
}

/**
 * Clamp a number between a minimum and maximum value
 * @param {number} x - Number
 * @param {number} min - Minimum value
 * @param {number} max - Maximum value
 * @returns {number} Clamped number
 */
export fn clamp(x, min, max) {
  return Math.min(Math.max(x, min), max);
}

/**
 * Get the minimum of two or more numbers
 * @param {...number} args - Numbers
 * @returns {number} Minimum number
 */
export fn min(...args) {
  return Math.min(...args);
}

/**
 * Get the maximum of two or more numbers
 * @param {...number} args - Numbers
 * @returns {number} Maximum number
 */
export fn max(...args) {
  return Math.max(...args);
}

/**
 * Calculate the sum of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @returns {number} Sum of the numbers
 */
export fn sum(arr) {
  if (!Array.isArray(arr)) {
    throw new Error("Input must be an array");
  }
  
  return arr.reduce((sum, value) => sum + value, 0);
}

/**
 * Calculate the product of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @returns {number} Product of the numbers
 */
export fn product(arr) {
  if (!Array.isArray(arr)) {
    throw new Error("Input must be an array");
  }
  
  return arr.reduce((product, value) => product * value, 1);
}

/**
 * Calculate the average of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @returns {number} Average of the numbers
 */
export fn average(arr) {
  if (!Array.isArray(arr) || arr.length === 0) {
    throw new Error("Input must be a non-empty array");
  }
  
  return sum(arr) / arr.length;
}

/**
 * Calculate the median of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @returns {number} Median of the numbers
 */
export fn median(arr) {
  if (!Array.isArray(arr) || arr.length === 0) {
    throw new Error("Input must be a non-empty array");
  }
  
  const sorted = [...arr].sort((a, b) => a - b);
  const middle = Math.floor(sorted.length / 2);
  
  if (sorted.length % 2 === 0) {
    return (sorted[middle - 1] + sorted[middle]) / 2;
  } else {
    return sorted[middle];
  }
}

/**
 * Calculate the mode of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @returns {number[]} Mode(s) of the numbers
 */
export fn mode(arr) {
  if (!Array.isArray(arr) || arr.length === 0) {
    throw new Error("Input must be a non-empty array");
  }
  
  const counts = {};
  let maxCount = 0;
  
  for (const value of arr) {
    counts[value] = (counts[value] || 0) + 1;
    maxCount = Math.max(maxCount, counts[value]);
  }
  
  return Object.keys(counts)
    .filter(value => counts[value] === maxCount)
    .map(value => Number(value));
}

/**
 * Calculate the variance of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @param {boolean} [population=false] - Whether to calculate population variance
 * @returns {number} Variance of the numbers
 */
export fn variance(arr, population = false) {
  if (!Array.isArray(arr) || arr.length === 0) {
    throw new Error("Input must be a non-empty array");
  }
  
  if (arr.length === 1) {
    return 0;
  }
  
  const avg = average(arr);
  const squaredDifferences = arr.map(value => Math.pow(value - avg, 2));
  const divisor = population ? arr.length : arr.length - 1;
  
  return sum(squaredDifferences) / divisor;
}

/**
 * Calculate the standard deviation of an array of numbers
 * @param {number[]} arr - Array of numbers
 * @param {boolean} [population=false] - Whether to calculate population standard deviation
 * @returns {number} Standard deviation of the numbers
 */
export fn standardDeviation(arr, population = false) {
  return Math.sqrt(variance(arr, population));
}

/**
 * Calculate the factorial of a number
 * @param {number} n - Number
 * @returns {number} Factorial of the number
 */
export fn factorial(n) {
  if (!isInteger(n) || n < 0) {
    throw new Error("Input must be a non-negative integer");
  }
  
  if (n === 0 || n === 1) {
    return 1;
  }
  
  let result = 1;
  for (let i = 2; i <= n; i++) {
    result *= i;
  }
  
  return result;
}

/**
 * Calculate the greatest common divisor (GCD) of two numbers
 * @param {number} a - First number
 * @param {number} b - Second number
 * @returns {number} Greatest common divisor
 */
export fn gcd(a, b) {
  a = Math.abs(a);
  b = Math.abs(b);
  
  while (b !== 0) {
    const temp = b;
    b = a % b;
    a = temp;
  }
  
  return a;
}

/**
 * Calculate the least common multiple (LCM) of two numbers
 * @param {number} a - First number
 * @param {number} b - Second number
 * @returns {number} Least common multiple
 */
export fn lcm(a, b) {
  return Math.abs(a * b) / gcd(a, b);
}

/**
 * Check if a number is prime
 * @param {number} n - Number
 * @returns {boolean} True if the number is prime
 */
export fn isPrime(n) {
  if (!isInteger(n) || n < 2) {
    return false;
  }
  
  if (n === 2 || n === 3) {
    return true;
  }
  
  if (n % 2 === 0 || n % 3 === 0) {
    return false;
  }
  
  for (let i = 5; i * i <= n; i += 6) {
    if (n % i === 0 || n % (i + 2) === 0) {
      return false;
    }
  }
  
  return true;
}

/**
 * Generate an array of prime numbers up to a limit
 * @param {number} limit - Upper limit
 * @returns {number[]} Array of prime numbers
 */
export fn generatePrimes(limit) {
  if (!isInteger(limit) || limit < 2) {
    return [];
  }
  
  const primes = [];
  const sieve = new Array(limit + 1).fill(true);
  
  for (let p = 2; p * p <= limit; p++) {
    if (sieve[p]) {
      for (let i = p * p; i <= limit; i += p) {
        sieve[i] = false;
      }
    }
  }
  
  for (let p = 2; p <= limit; p++) {
    if (sieve[p]) {
      primes.push(p);
    }
  }
  
  return primes;
}

// Create a namespace for the package
const math = {
  // Constants
  PI, E, LN2, LN10, LOG2E, LOG10E, SQRT1_2, SQRT2,
  EPSILON, MAX_SAFE_INTEGER, MIN_SAFE_INTEGER, MAX_VALUE, MIN_VALUE,
  INFINITY, NaN,
  
  // Basic arithmetic
  add, subtract, multiply, divide, mod, pow, sqrt, cbrt,
  abs, round, floor, ceil, trunc, sign,
  isInteger, isSafeInteger, isNaN, isFinite,
  clamp, min, max,
  
  // Statistical functions
  sum, product, average, median, mode,
  variance, standardDeviation,
  
  // Number theory
  factorial, gcd, lcm, isPrime, generatePrimes
};

// Default export
export default math;
