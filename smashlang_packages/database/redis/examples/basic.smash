// basic.smash - Basic Redis operations example

import "redis";

// Create a Redis client
const client = redis.createClient({
  host: "localhost",
  port: 6379
});

async fn main() {
  print("=== Basic Redis Operations Example ===");
  
  try {
    // String operations
    print("\n--- String Operations ---");
    await client.commands.string.set("greeting", "Hello, SmashLang!");
    const greeting = await client.commands.string.get("greeting");
    print(`Retrieved greeting: ${greeting}`);
    
    await client.commands.string.set("counter", "10");
    const incremented = await client.commands.string.incr("counter");
    print(`Incremented counter: ${incremented}`);
    
    // Hash operations
    print("\n--- Hash Operations ---");
    await client.commands.hash.hset("user:1000", "name", "John");
    await client.commands.hash.hset("user:1000", "email", "john@example.com");
    await client.commands.hash.hset("user:1000", "age", "30");
    
    const name = await client.commands.hash.hget("user:1000", "name");
    print(`User name: ${name}`);
    
    const userData = await client.commands.hash.hgetall("user:1000");
    print("User data: " + JSON.stringify(userData));
    
    // List operations
    print("\n--- List Operations ---");
    await client.commands.list.lpush("tasks", "Learn SmashLang");
    await client.commands.list.lpush("tasks", "Build Redis app");
    await client.commands.list.rpush("tasks", "Write documentation");
    
    const tasks = await client.commands.list.lrange("tasks", 0, -1);
    print("Tasks: " + JSON.stringify(tasks));
    
    const nextTask = await client.commands.list.lpop("tasks");
    print(`Next task to do: ${nextTask}`);
    
    // Set operations
    print("\n--- Set Operations ---");
    await client.commands.set.sadd("tags", "programming", "database", "redis", "smashlang");
    
    const isMember = await client.commands.set.sismember("tags", "redis");
    print(`Is 'redis' in tags? ${isMember ? 'Yes' : 'No'}`);
    
    const tags = await client.commands.set.smembers("tags");
    print("All tags:", tags);
    
    // Sorted Set operations
    print("\n--- Sorted Set Operations ---");
    await client.commands.sorted_set.zadd("scores", 100, "player1");
    await client.commands.sorted_set.zadd("scores", 85, "player2");
    await client.commands.sorted_set.zadd("scores", 95, "player3");
    
    const topScores = await client.commands.sorted_set.zrange("scores", 0, 2, { withScores: true });
    print("Top scores:", topScores);
    
    // Clean up
    print("\n--- Cleaning Up ---");
    // Delete the keys we created
    await client.del("greeting");
    await client.del("counter");
    await client.del("user:1000");
    await client.del("tasks");
    await client.del("tags");
    await client.del("scores");
    
    print("Cleanup complete!");
    
    // Close the connection
    await client.quit();
    print("\nConnection closed.");
  } catch (error) {
    console.error(`Error: ${error.message}`);
    // Make sure to close the connection even if there's an error
    await client.quit();
  }
}

// Run the main function
main().catch(error => {
  console.error("Unhandled error:", error);
});
