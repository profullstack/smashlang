// crud.smash - PocketBase CRUD operations example

import "pocketbase";

// Create a PocketBase client
const pb = pocketbase.createClient("http://127.0.0.1:8090");

async fn main() {
  print("=== PocketBase CRUD Operations Example ===");
  
  try {
    // First authenticate
    print("Authenticating...");
    await pb.authWithPassword("users", "test@example.com", "password123");
    print("Authentication successful!\n");
    
    // Create a record
    print("Creating a new task...");
    const newTask = {
      title: "Learn SmashLang",
      description: "Master the SmashLang programming language",
      status: "in-progress",
      due_date: new Date().toISOString()
    };
    
    const createdTask = await pb.createRecord("tasks", newTask);
    print("Task created successfully:");
    print(`ID: ${createdTask.id}`);
    print(`Title: ${createdTask.title}`);
    print(`Status: ${createdTask.status}`);
    print(`Created: ${createdTask.created}\n`);
    
    // Get a record
    print(`Retrieving task with ID: ${createdTask.id}...`);
    const task = await pb.getRecord("tasks", createdTask.id);
    print("Task retrieved successfully:");
    print(`Title: ${task.title}`);
    print(`Description: ${task.description}`);
    print(`Status: ${task.status}\n`);
    
    // Update a record
    print("Updating task status to 'completed'...");
    const updatedData = {
      status: "completed",
      completed_at: new Date().toISOString()
    };
    
    const updatedTask = await pb.updateRecord("tasks", task.id, updatedData);
    print("Task updated successfully:");
    print(`Title: ${updatedTask.title}`);
    print(`Status: ${updatedTask.status}`);
    print(`Completed at: ${updatedTask.completed_at}\n`);
    
    // List records with filtering
    print("Listing all completed tasks...");
    const taskList = await pb.getRecordList("tasks", 1, 10, "status = 'completed'");
    print(`Found ${taskList.items.length} completed tasks:`);
    
    for (let i = 0; i < taskList.items.length; i++) {
      const item = taskList.items[i];
      print(`${i + 1}. ${item.title} (ID: ${item.id})`);
    }
    print("");
    
    // Pagination example
    print("Pagination information:");
    print(`Page: ${taskList.page}`);
    print(`Items per page: ${taskList.perPage}`);
    print(`Total items: ${taskList.totalItems}`);
    print(`Total pages: ${taskList.totalPages}\n`);
    
    // Delete a record
    print(`Deleting task with ID: ${task.id}...`);
    await pb.deleteRecord("tasks", task.id);
    print("Task deleted successfully!\n");
    
    // Verify deletion
    try {
      await pb.getRecord("tasks", task.id);
    } catch (error) {
      print(`Verification: ${error.message}`);
    }
  } catch (error) {
    print(`CRUD error: ${error.message}`);
  }
}

// Run the main function
main().catch(error => {
  print("Error in main function: " + error);
});
