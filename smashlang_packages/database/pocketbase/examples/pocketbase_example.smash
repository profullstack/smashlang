// pocketbase_example.smash - Example of using PocketBase with SmashLang

import "pocketbase";
import "std";

// Create a PocketBase client
const pb = pocketbase.createClient("http://127.0.0.1:8090");

// Example: Authentication
async fn authExample() {
  print("=== Authentication Example ===");
  
  try {
    // Login with email and password
    const authData = await pb.authWithPassword("users", "test@example.com", "password123");
    print("Logged in successfully!");
    print(`User ID: ${authData.model.id}`);
    print(`Username: ${authData.model.username}`);
    print(`Email: ${authData.model.email}`);
    print(`Token: ${authData.token.substring(0, 15)}...`);
    
    // Check if user is authenticated
    if (pb.authStore.token) {
      print("User is authenticated");
    }
    
    // Logout
    await pb.logout();
    print("Logged out successfully!");
  } catch (error) {
    print(`Authentication error: ${error.message}`);
  }
}

// Example: CRUD operations
async fn crudExample() {
  print("\n=== CRUD Operations Example ===");
  
  try {
    // First authenticate
    await pb.authWithPassword("users", "test@example.com", "password123");
    
    // Create a record
    const newTask = {
      title: "Learn SmashLang",
      description: "Master the SmashLang programming language",
      status: "in-progress",
      due_date: new Date().toISOString()
    };
    
    const createdTask = await pb.createRecord("tasks", newTask);
    print("Created new task: " + JSON.stringify(createdTask));
    
    // Get a record
    const task = await pb.getRecord("tasks", createdTask.id);
    print("Retrieved task: " + JSON.stringify(task));
    
    // Update a record
    const updatedData = {
      status: "completed"
    };
    
    const updatedTask = await pb.updateRecord("tasks", task.id, updatedData);
    print("Updated task: " + JSON.stringify(updatedTask));
    
    // List records with filtering
    const taskList = await pb.getRecordList("tasks", 1, 10, "status = 'completed'");
    print(`Found ${taskList.items.length} completed tasks`);
    
    // Delete a record
    await pb.deleteRecord("tasks", task.id);
    print(`Deleted task with ID: ${task.id}`);
  } catch (error) {
    print(`CRUD error: ${error.message}`);
  }
}

// Example: Realtime subscriptions
async fn realtimeExample() {
  print("\n=== Realtime Example ===");
  
  try {
    // Subscribe to changes in the "tasks" collection
    pb.subscribe("tasks", (event) => {
      print(`Realtime event: ${event.action}`);
      print("Affected record: " + JSON.stringify(event.record));
    });
    
    print("Subscribed to the 'tasks' collection");
    print("Creating a new task to trigger realtime event...");
    
    // Create a new task to trigger the subscription
    const newTask = {
      title: "Test Realtime",
      description: "This should trigger a realtime event",
      status: "new"
    };
    
    await pb.createRecord("tasks", newTask);
    
    // Wait for a moment to see the realtime event
    await std.sleep(2000);
    
    // Unsubscribe
    pb.unsubscribe("tasks");
    print("Unsubscribed from the 'tasks' collection");
  } catch (error) {
    print(`Realtime error: ${error.message}`);
  }
}

// Example: File uploads and handling
async fn fileExample() {
  print("\n=== File Handling Example ===");
  
  try {
    // First authenticate
    await pb.authWithPassword("users", "test@example.com", "password123");
    
    // Create a record with a file
    const fileData = fs.readFileSync("./example.png");
    
    // Create a document record first
    const newDocument = {
      title: "Project Documentation",
      description: "Important project files"
    };
    
    const createdDoc = await pb.createRecord("documents", newDocument);
    
    // Upload file to the record
    await pb.uploadFile("documents", createdDoc.id, "attachment", fileData, "example.png");
    print("File uploaded successfully!");
    
    // Get the file URL
    const fileUrl = pb.getFileUrl(createdDoc, createdDoc.attachment);
    print(`File URL: ${fileUrl}`);
  } catch (error) {
    print(`File handling error: ${error.message}`);
  }
}

// Example: Admin operations
async fn adminExample() {
  print("\n=== Admin Operations Example ===");
  
  try {
    // First authenticate as admin
    await pb.authWithPassword("_pb_users_auth_", "admin@example.com", "adminpassword123");
    
    // Create admin client
    const admin = new pocketbase.Admin(pb);
    
    // List collections
    const collections = await admin.getCollectionList();
    print(`Found ${collections.length} collections:`);
    for (const collection of collections) {
      print(`- ${collection.name}`);
    }
    
    // Create a new collection
    const newCollection = {
      name: "projects",
      schema: [
        {
          name: "title",
          type: "text",
          required: true
        },
        {
          name: "description",
          type: "text",
          required: false
        },
        {
          name: "status",
          type: "select",
          options: {
            values: ["planning", "in-progress", "completed", "on-hold"]
          }
        },
        {
          name: "owner",
          type: "relation",
          options: {
            collectionId: "users",
            cascadeDelete: false
          }
        }
      ]
    };
    
    const createdCollection = await admin.createCollection(newCollection);
    print("Created new collection: " + createdCollection.name);
    
    // Get system logs
    const logs = await admin.getLogs(1, 5);
    print("Recent system logs:");
    for (const log of logs.items) {
      print(`[${log.created}] ${log.action}: ${log.message}`);
    }
  } catch (error) {
    print(`Admin operations error: ${error.message}`);
  }
}

// Run all examples
async fn main() {
  print("Starting PocketBase examples...");
  print("Note: These examples assume you have a PocketBase server running at http://127.0.0.1:8090");
  print("with the appropriate collections and user accounts set up.\n");
  
  await authExample();
  await crudExample();
  await realtimeExample();
  await fileExample();
  await adminExample();
  
  print("\nAll examples completed!");
}

// Run the main function
main().catch(error => {
  print("Error in main function: " + error);
});
