/**
 * Basic PocketBase Package Example
 * 
 * This example demonstrates the basic functionality of the PocketBase package,
 * including authentication, CRUD operations, and realtime subscriptions.
 */

import { pocketbase } from "../src/index.smash";

// Main async function to run all examples
async fn runExamples() {
  print("=== PocketBase Package Basic Examples ===\n");
  
  // Create a client
  print("Creating PocketBase client...");
  const pb = pocketbase.createClient("http://127.0.0.1:8090");
  print("Client created");
  print("---");
  
  // Example 1: Authentication
  print("=== Authentication ===");
  
  try {
    print("Authenticating with email and password...");
    const authData = await pb.authWithPassword("users", "user@example.com", "password123");
    
    print("Authentication successful!");
    print(`User ID: ${authData.model.id}`);
    print(`Email: ${authData.model.email}`);
    print(`Auth token: ${authData.token.substring(0, 10)}...`);
    
    // Check if authenticated
    print(`Is authenticated: ${pb.authStore.isValid()}`);
    
    // Get the authenticated user model
    print("Authenticated user:", pb.authStore.model);
  } catch (error) {
    print("Authentication failed:", error);
  }
  print("---");
  
  // Example 2: Creating Records
  print("=== Creating Records ===");
  
  try {
    print("Creating a task record...");
    const taskData = {
      title: "Learn SmashLang",
      description: "Master the SmashLang programming language",
      status: "in-progress",
      priority: "high",
      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now
    };
    
    const task = await pb.createRecord("tasks", taskData);
    
    print("Task created successfully!");
    print(`Task ID: ${task.id}`);
    print(`Title: ${task.title}`);
    print(`Status: ${task.status}`);
    print(`Created: ${task.created}`);
    
    // Store the task ID for later examples
    const taskId = task.id;
    
    // Create another task
    print("\nCreating another task record...");
    const anotherTaskData = {
      title: "Build a SmashLang App",
      description: "Create a full application using SmashLang",
      status: "not-started",
      priority: "medium",
      dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString() // 14 days from now
    };
    
    const anotherTask = await pb.createRecord("tasks", anotherTaskData);
    
    print("Second task created successfully!");
    print(`Task ID: ${anotherTask.id}`);
    print(`Title: ${anotherTask.title}`);
  } catch (error) {
    print("Failed to create records:", error);
  }
  print("---");
  
  // Example 3: Reading Records
  print("=== Reading Records ===");
  
  try {
    // Get a list of tasks
    print("Getting a list of tasks...");
    const taskList = await pb.getRecordList("tasks", 1, 10);
    
    print(`Found ${taskList.totalItems} tasks (showing page ${taskList.page} of ${taskList.totalPages}):`);
    
    taskList.items.forEach((task, index) => {
      print(`${index + 1}. ${task.title} (${task.status})`);
    });
    
    // Get a single task
    if (taskList.items.length > 0) {
      const firstTaskId = taskList.items[0].id;
      
      print(`\nGetting details for task ${firstTaskId}...`);
      const taskDetails = await pb.getRecord("tasks", firstTaskId);
      
      print("Task details:");
      print(`- Title: ${taskDetails.title}`);
      print(`- Description: ${taskDetails.description}`);
      print(`- Status: ${taskDetails.status}`);
      print(`- Priority: ${taskDetails.priority}`);
      print(`- Due Date: ${taskDetails.dueDate}`);
      print(`- Created: ${taskDetails.created}`);
      print(`- Updated: ${taskDetails.updated}`);
    }
  } catch (error) {
    print("Failed to read records:", error);
  }
  print("---");
  
  // Example 4: Updating Records
  print("=== Updating Records ===");
  
  try {
    // Get the first task
    const taskList = await pb.getRecordList("tasks", 1, 1);
    
    if (taskList.items.length > 0) {
      const task = taskList.items[0];
      
      print(`Updating task ${task.id}...`);
      print(`Current status: ${task.status}`);
      
      // Update the task
      const updatedData = {
        status: task.status === "in-progress" ? "completed" : "in-progress",
        updated: new Date().toISOString()
      };
      
      const updatedTask = await pb.updateRecord("tasks", task.id, updatedData);
      
      print("Task updated successfully!");
      print(`New status: ${updatedTask.status}`);
      print(`Updated: ${updatedTask.updated}`);
    } else {
      print("No tasks found to update");
    }
  } catch (error) {
    print("Failed to update record:", error);
  }
  print("---");
  
  // Example 5: Deleting Records
  print("=== Deleting Records ===");
  
  try {
    // Get the last task
    const taskList = await pb.getRecordList("tasks", 1, 10);
    
    if (taskList.items.length > 0) {
      const lastTask = taskList.items[taskList.items.length - 1];
      
      print(`Deleting task ${lastTask.id} (${lastTask.title})...`);
      
      // Delete the task
      const result = await pb.deleteRecord("tasks", lastTask.id);
      
      if (result) {
        print("Task deleted successfully!");
      } else {
        print("Failed to delete task");
      }
      
      // Verify deletion
      print("\nVerifying deletion...");
      const newTaskList = await pb.getRecordList("tasks", 1, 10);
      print(`Now have ${newTaskList.totalItems} tasks (previously had ${taskList.totalItems})`);
    } else {
      print("No tasks found to delete");
    }
  } catch (error) {
    print("Failed to delete record:", error);
  }
  print("---");
  
  // Example 6: Realtime Subscriptions
  print("=== Realtime Subscriptions ===");
  
  print("Subscribing to task changes...");
  
  // Subscribe to task changes
  pb.subscribe("tasks", (event) => {
    print(`Realtime event received: ${event.action}`);
    print(`Affected record: ${event.record.id} (${event.record.title})`);
    
    if (event.action === "create") {
      print("A new task was created!");
    } else if (event.action === "update") {
      print("A task was updated!");
    } else if (event.action === "delete") {
      print("A task was deleted!");
    }
  });
  
  print("Subscription active. Waiting for events...");
  print("(Events will be simulated for this example)");
  
  // Wait for a few seconds to receive some events
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  // Unsubscribe
  print("\nUnsubscribing from task changes...");
  pb.unsubscribe("tasks");
  print("Unsubscribed");
  print("---");
  
  // Example 7: Logging Out
  print("=== Logging Out ===");
  
  print("Logging out...");
  pb.logout();
  
  print(`Is authenticated: ${pb.authStore.isValid()}`);
  print(`Auth token: ${pb.authStore.token}`);
  print(`User model: ${pb.authStore.model}`);
  print("---");
  
  print("All examples completed!");
}

// Run the examples
runExamples().catch(error => {
  print("Error running examples:", error);
});