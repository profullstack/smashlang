/**
 * Advanced PostgreSQL Package Example
 * 
 * This example demonstrates advanced features of the PostgreSQL package,
 * including transactions, connection pooling, and more complex queries.
 */

import { postgres } from "../src/index.smash";

// Function to log a result in a readable format
function logResult(result) {
  console.log(`Query returned ${result.rowCount} rows`);
  
  if (result.fields.length > 0) {
    console.log("Fields:", result.fields.map(field => field.name).join(", "));
  }
  
  if (result.rows.length > 0) {
    console.log("Rows:");
    result.rows.forEach((row, index) => {
      console.log(`  ${index + 1}:`, row);
    });
  } else {
    console.log("No rows returned");
  }
  
  console.log("---");
}

// Main async function to run all examples
async function runExamples() {
  console.log("=== PostgreSQL Package Advanced Examples ===\n");
  
  // Example 1: Transactions
  console.log("=== Transactions ===");
  let connection;
  
  try {
    // Connect to the database
    connection = await postgres.connect("postgresql://username:password@localhost:5432/mydatabase");
    
    // Create tables for the example
    console.log("Setting up tables for transaction example...");
    await connection.query(`
      CREATE TABLE IF NOT EXISTS accounts (
        id SERIAL PRIMARY KEY,
        owner_id INTEGER NOT NULL,
        balance DECIMAL(10, 2) NOT NULL
      )
    `);
    
    await connection.query(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        account_id INTEGER NOT NULL,
        amount DECIMAL(10, 2) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Insert initial data
    await connection.query(
      "INSERT INTO accounts (owner_id, balance) VALUES ($1, $2), ($3, $4)",
      [1, 1000.00, 2, 500.00]
    );
    
    console.log("Tables created and initialized");
    console.log("---");
    
    // Begin a transaction
    console.log("Beginning a transaction...");
    const transaction = await connection.beginTransaction();
    
    try {
      // Transfer money between accounts
      const amount = 200.00;
      const fromAccountId = 1;
      const toAccountId = 2;
      
      console.log(`Transferring $${amount} from account ${fromAccountId} to account ${toAccountId}...`);
      
      // Deduct from the first account
      await transaction.query(
        "UPDATE accounts SET balance = balance - $1 WHERE id = $2",
        [amount, fromAccountId]
      );
      
      // Add to the second account
      await transaction.query(
        "UPDATE accounts SET balance = balance + $1 WHERE id = $2",
        [amount, toAccountId]
      );
      
      // Record the transaction
      await transaction.query(
        "INSERT INTO transactions (account_id, amount, description) VALUES ($1, $2, $3), ($4, $5, $6)",
        [
          fromAccountId, -amount, `Transfer to account ${toAccountId}`,
          toAccountId, amount, `Transfer from account ${fromAccountId}`
        ]
      );
      
      // Commit the transaction
      await transaction.commit();
      console.log("Transaction committed successfully");
      
    } catch (error) {
      // Rollback the transaction on error
      await transaction.rollback();
      console.error("Transaction failed and was rolled back:", error.message);
    }
    
    // Check the account balances after the transaction
    console.log("Account balances after the transaction:");
    const accountsResult = await connection.query("SELECT * FROM accounts ORDER BY id");
    logResult(accountsResult);
    
    // Check the transaction records
    console.log("Transaction records:");
    const transactionsResult = await connection.query("SELECT * FROM transactions ORDER BY id");
    logResult(transactionsResult);
    
    // Clean up
    await connection.query("DROP TABLE IF EXISTS transactions");
    await connection.query("DROP TABLE IF EXISTS accounts");
    console.log("Tables dropped");
    console.log("---");
    
  } catch (error) {
    console.error("Error in transaction example:", error.message);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
  
  // Example 2: Connection Pooling
  console.log("\n=== Connection Pooling ===");
  let pool;
  
  try {
    // Create a connection pool
    console.log("Creating a connection pool...");
    pool = postgres.createPool({
      connectionString: "postgresql://username:password@localhost:5432/mydatabase",
      min: 2,  // Minimum connections in pool
      max: 10, // Maximum connections in pool
      idleTimeout: 30000 // Close idle connections after 30 seconds
    });
    
    // Create a table for the example
    console.log("Setting up a table for connection pool example...");
    await pool.query(`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        stock INTEGER NOT NULL
      )
    `);
    
    // Insert some products
    const products = [
      ["Laptop", 999.99, 10],
      ["Smartphone", 699.99, 20],
      ["Headphones", 149.99, 30],
      ["Tablet", 349.99, 15],
      ["Monitor", 249.99, 5]
    ];
    
    console.log("Inserting products using the connection pool...");
    for (const [name, price, stock] of products) {
      await pool.query(
        "INSERT INTO products (name, price, stock) VALUES ($1, $2, $3)",
        [name, price, stock]
      );
    }
    
    // Simulate multiple concurrent queries
    console.log("Executing multiple concurrent queries...");
    const queries = [
      pool.query("SELECT * FROM products WHERE price < $1", [300]),
      pool.query("SELECT * FROM products WHERE stock > $1", [15]),
      pool.query("SELECT * FROM products WHERE name LIKE $1", ["%phone%"]),
      pool.query("SELECT AVG(price) as avg_price FROM products"),
      pool.query("SELECT SUM(stock) as total_stock FROM products")
    ];
    
    const results = await Promise.all(queries);
    
    console.log("Results from concurrent queries:");
    results.forEach((result, index) => {
      console.log(`Query ${index + 1}:`);
      logResult(result);
    });
    
    // Get a client from the pool for a series of related operations
    console.log("Getting a client from the pool...");
    const client = await pool.connect();
    
    try {
      // Use the client for multiple operations
      console.log("Using a dedicated client for multiple operations...");
      
      // Start a transaction
      const transaction = await client.beginTransaction();
      
      try {
        // Update product stock
        await transaction.query(
          "UPDATE products SET stock = stock - $1 WHERE name = $2",
          [2, "Laptop"]
        );
        
        // Check if we have enough stock
        const stockResult = await transaction.query(
          "SELECT stock FROM products WHERE name = $1",
          ["Laptop"]
        );
        
        if (stockResult.first.stock < 0) {
          throw new Error("Not enough stock");
        }
        
        // Commit the transaction
        await transaction.commit();
        console.log("Transaction committed successfully");
        
      } catch (error) {
        // Rollback the transaction on error
        await transaction.rollback();
        console.error("Transaction failed and was rolled back:", error.message);
      }
      
    } finally {
      // Release the client back to the pool
      client.release();
      console.log("Client released back to the pool");
    }
    
    // Check the final product data
    console.log("Final product data:");
    const productsResult = await pool.query("SELECT * FROM products ORDER BY id");
    logResult(productsResult);
    
    // Clean up
    await pool.query("DROP TABLE IF EXISTS products");
    console.log("Table dropped");
    console.log("---");
    
  } catch (error) {
    console.error("Error in connection pool example:", error.message);
  } finally {
    if (pool) {
      console.log("Closing the connection pool...");
      await pool.end();
      console.log("Connection pool closed");
    }
  }
  
  // Example 3: Complex Queries and Data Manipulation
  console.log("\n=== Complex Queries and Data Manipulation ===");
  let complexConnection;
  
  try {
    // Connect to the database
    complexConnection = await postgres.connect("postgresql://username:password@localhost:5432/mydatabase");
    
    // Create tables for the example
    console.log("Setting up tables for complex query example...");
    await complexConnection.query(`
      CREATE TABLE IF NOT EXISTS customers (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    await complexConnection.query(`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        customer_id INTEGER NOT NULL,
        total_amount DECIMAL(10, 2) NOT NULL,
        status VARCHAR(20) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    await complexConnection.query(`
      CREATE TABLE IF NOT EXISTS order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER NOT NULL,
        product_name VARCHAR(100) NOT NULL,
        quantity INTEGER NOT NULL,
        price DECIMAL(10, 2) NOT NULL
      )
    `);
    
    // Insert sample data
    console.log("Inserting sample data...");
    
    // Insert customers
    const customerResult = await complexConnection.query(`
      INSERT INTO customers (name, email) VALUES
      ('John Doe', 'john@example.com'),
      ('Jane Smith', 'jane@example.com'),
      ('Bob Johnson', 'bob@example.com')
      RETURNING id, name
    `);
    
    const customers = customerResult.rows;
    console.log("Inserted customers:", customers);
    
    // Insert orders
    for (const customer of customers) {
      const numOrders = Math.floor(Math.random() * 3) + 1;
      
      for (let i = 0; i < numOrders; i++) {
        const orderResult = await complexConnection.query(`
          INSERT INTO orders (customer_id, total_amount, status) VALUES
          ($1, $2, $3)
          RETURNING id
        `, [
          customer.id,
          Math.random() * 500 + 50,
          ['pending', 'completed', 'shipped'][Math.floor(Math.random() * 3)]
        ]);
        
        const orderId = orderResult.first.id;
        
        // Insert order items
        const numItems = Math.floor(Math.random() * 4) + 1;
        let orderTotal = 0;
        
        for (let j = 0; j < numItems; j++) {
          const productName = ['Laptop', 'Smartphone', 'Headphones', 'Tablet', 'Monitor'][Math.floor(Math.random() * 5)];
          const quantity = Math.floor(Math.random() * 3) + 1;
          const price = Math.random() * 200 + 50;
          const itemTotal = quantity * price;
          orderTotal += itemTotal;
          
          await complexConnection.query(`
            INSERT INTO order_items (order_id, product_name, quantity, price) VALUES
            ($1, $2, $3, $4)
          `, [orderId, productName, quantity, price]);
        }
        
        // Update order total
        await complexConnection.query(`
          UPDATE orders SET total_amount = $1 WHERE id = $2
        `, [orderTotal, orderId]);
      }
    }
    
    console.log("Sample data inserted");
    console.log("---");
    
    // Complex query 1: Join tables to get customer orders with items
    console.log("Complex Query 1: Customer orders with items");
    const customerOrdersResult = await complexConnection.query(`
      SELECT 
        c.id as customer_id, 
        c.name as customer_name,
        o.id as order_id,
        o.total_amount,
        o.status,
        COUNT(oi.id) as item_count,
        SUM(oi.quantity) as total_items
      FROM customers c
      JOIN orders o ON c.id = o.customer_id
      JOIN order_items oi ON o.id = oi.order_id
      GROUP BY c.id, c.name, o.id, o.total_amount, o.status
      ORDER BY c.id, o.id
    `);
    
    logResult(customerOrdersResult);
    
    // Complex query 2: Calculate statistics
    console.log("Complex Query 2: Order statistics");
    const statsResult = await complexConnection.query(`
      SELECT
        c.name as customer_name,
        COUNT(o.id) as order_count,
        SUM(o.total_amount) as total_spent,
        AVG(o.total_amount) as avg_order_value,
        MAX(o.total_amount) as largest_order,
        MIN(o.total_amount) as smallest_order
      FROM customers c
      JOIN orders o ON c.id = o.customer_id
      GROUP BY c.id, c.name
      ORDER BY total_spent DESC
    `);
    
    logResult(statsResult);
    
    // Complex query 3: Find popular products
    console.log("Complex Query 3: Popular products");
    const popularProductsResult = await complexConnection.query(`
      SELECT
        product_name,
        COUNT(*) as order_count,
        SUM(quantity) as total_quantity,
        AVG(price) as avg_price
      FROM order_items
      GROUP BY product_name
      ORDER BY total_quantity DESC
    `);
    
    logResult(popularProductsResult);
    
    // Clean up
    await complexConnection.query("DROP TABLE IF EXISTS order_items");
    await complexConnection.query("DROP TABLE IF EXISTS orders");
    await complexConnection.query("DROP TABLE IF EXISTS customers");
    console.log("Tables dropped");
    console.log("---");
    
  } catch (error) {
    console.error("Error in complex query example:", error.message);
  } finally {
    if (complexConnection) {
      await complexConnection.close();
    }
  }
  
  console.log("\nAll advanced examples completed!");
}

// Run the examples
runExamples().catch(error => {
  console.error("Error running advanced examples:", error);
});