// postinstall.smash - Post-installation script for FConvert package

// Import required modules
import "fs";
import "path";

print("Running FConvert post-installation setup...");

// Function to check if a command exists
fn commandExists(command) {
  try {
    const result = fs.execSync(`command -v ${command}`);
    return result.toString().trim().length > 0;
  } catch (error) {
    return false;
  }
}

// Create configuration directory and default config
fn setupConfig() {
  try {
    // Create config directory in user's home
    const configDir = path.join(std.env.HOME, ".config", "fconvert");
    const configFile = path.join(configDir, "config.json");
    
    // Create directory if it doesn't exist
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
      print(`\u2713 Created configuration directory: ${configDir}`);
    }
    
    // Create default configuration file if it doesn't exist
    if (!fs.existsSync(configFile)) {
      const defaultConfig = {
        "version": "0.1.0",
        "defaultOptions": {
          "images": {
            "quality": 90,
            "resize": null
          },
          "documents": {
            "template": "default",
            "standalone": true
          },
          "audio": {
            "bitrate": "192k",
            "sampleRate": 44100
          },
          "video": {
            "codec": "h264",
            "crf": 23,
            "preset": "medium"
          }
        },
        "cacheEnabled": true,
        "cacheDir": path.join(configDir, "cache"),
        "logLevel": "info"
      };
      
      // Write the config file
      fs.writeFileSync(configFile, JSON.stringify(defaultConfig, null, 2));
      print(`\u2713 Created default configuration file: ${configFile}`);
      
      // Create cache directory
      if (!fs.existsSync(defaultConfig.cacheDir)) {
        fs.mkdirSync(defaultConfig.cacheDir, { recursive: true });
        print(`\u2713 Created cache directory: ${defaultConfig.cacheDir}`);
      }
    } else {
      print(`\u2713 Configuration file already exists: ${configFile}`);
    }
    
    return true;
  } catch (error) {
    console.error(`\u2717 Failed to set up configuration: ${error.message}`);
    return false;
  }
}

// Check for optional dependencies
fn checkOptionalDependencies() {
  const optionalDeps = [
    { name: 'Inkscape', command: 'inkscape', usedFor: 'SVG processing' },
    { name: 'Ghostscript', command: 'gs', usedFor: 'PDF processing' },
    { name: 'ExifTool', command: 'exiftool', usedFor: 'metadata handling' }
  ];
  
  const available = [];
  const missing = [];
  
  for (const dep of optionalDeps) {
    if (commandExists(dep.command)) {
      available.push(dep);
    } else {
      missing.push(dep);
    }
  }
  
  if (available.length > 0) {
    print("\nDetected optional dependencies:");
    for (const dep of available) {
      print(`\u2713 ${dep.name} (${dep.command}): Available for ${dep.usedFor}`);
    }
  }
  
  if (missing.length > 0) {
    print("\nOptional dependencies not found:");
    for (const dep of missing) {
      print(`\u2139 ${dep.name} (${dep.command}): Useful for ${dep.usedFor}`);
    }
    print("These dependencies are optional but can enhance FConvert's capabilities.");
  }
}

// Print success message with usage examples
fn printSuccessMessage() {
  print("\n\u2728 FConvert has been successfully installed! \u2728\n");
  print("Quick Start Guide:");
  print("  1. Convert an image:         fconvert image.jpg image.png");
  print("  2. Convert a document:       fconvert document.md document.pdf");
  print("  3. Convert audio:            fconvert audio.wav audio.mp3");
  print("  4. Convert video:            fconvert video.mp4 video.webm");
  print("  5. See all supported formats: fconvert --formats");
  print("  6. Get help:                 fconvert --help\n");
  
  print("Configuration file: ~/.config/fconvert/config.json");
  print("Documentation: https://github.com/profullstack/smashlang/packages/tools/fconvert\n");
}

// Main function
fn main() {
  print("Setting up FConvert...");
  
  // Set up configuration
  const configSetup = setupConfig();
  if (!configSetup) {
    console.warn("\u26a0 Configuration setup failed. Using default settings.");
  }
  
  // Check for optional dependencies
  checkOptionalDependencies();
  
  // Print success message
  printSuccessMessage();
  
  print("Post-installation setup completed successfully.\n");
}

// Run the main function
main();
