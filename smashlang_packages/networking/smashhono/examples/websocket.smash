// websocket.smash - WebSocket chat example with SmashHono

import "smashhono";

// Create a new SmashHono app
const app = new SmashHono();

// Add middleware
app.use(smashhono.middleware.logger());

// Store connected clients
const clients = new Map();
let userIdCounter = 1;

// HTML interface for the chat application
app.get("/", (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>SmashHono WebSocket Chat</title>
        <style>
          body {
            font-family: system-ui, -apple-system, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            line-height: 1.6;
          }
          h1 { color: #e63c3c; }
          #chat-container {
            display: flex;
            flex-direction: column;
            height: 70vh;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
          }
          #messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: #f9f9f9;
          }
          .message {
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border-radius: 4px;
          }
          .system { background: #e0e0e0; }
          .user { background: #e3f2fd; }
          .self { background: #e8f5e9; text-align: right; }
          .username {
            font-weight: bold;
            margin-right: 0.5rem;
          }
          .timestamp {
            font-size: 0.8rem;
            color: #666;
          }
          #input-area {
            display: flex;
            padding: 0.5rem;
            background: #f0f0f0;
            border-top: 1px solid #ddd;
          }
          #message-input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
          }
          #send-button {
            margin-left: 0.5rem;
            padding: 0.5rem 1rem;
            background: #e63c3c;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
          }
          #send-button:hover { background: #d32f2f; }
          #status {
            margin-top: 1rem;
            padding: 0.5rem;
            border-radius: 4px;
            background: #f0f0f0;
          }
          #user-info {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
          }
          #username {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 0.5rem;
          }
          #set-username {
            padding: 0.5rem 1rem;
            background: #333;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
          }
          #online-users {
            margin-top: 1rem;
            padding: 1rem;
            background: #f5f5f5;
            border-radius: 4px;
          }
          .user-list-item {
            display: inline-block;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            padding: 0.25rem 0.5rem;
            background: #e0e0e0;
            border-radius: 4px;
          }
        </style>
      </head>
      <body>
        <h1>SmashHono WebSocket Chat ud83dudd25</h1>
        <p>A real-time chat application built with SmashHono for SmashLang.</p>
        
        <div id="user-info">
          <input type="text" id="username" placeholder="Your username" />
          <button id="set-username">Set Username</button>
        </div>
        
        <div id="chat-container">
          <div id="messages"></div>
          <div id="input-area">
            <input type="text" id="message-input" placeholder="Type a message..." />
            <button id="send-button">Send</button>
          </div>
        </div>
        
        <div id="status">Connecting...</div>
        
        <div id="online-users">
          <h3>Online Users</h3>
          <div id="user-list"></div>
        </div>
        
        <script>
          // Client state
          let ws;
          let userId = null;
          let username = 'Guest' + Math.floor(Math.random() * 1000);
          let isConnected = false;
          
          // DOM elements
          const messagesEl = document.getElementById('messages');
          const messageInput = document.getElementById('message-input');
          const sendButton = document.getElementById('send-button');
          const statusEl = document.getElementById('status');
          const usernameInput = document.getElementById('username');
          const setUsernameButton = document.getElementById('set-username');
          const userListEl = document.getElementById('user-list');
          
          // Initialize username input
          usernameInput.value = username;
          
          // Connect to WebSocket server
          function connect() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
              isConnected = true;
              statusEl.textContent = 'Connected';
              statusEl.style.background = '#e8f5e9';
              
              // Send initial username
              sendControlMessage('join', { username });
            };
            
            ws.onmessage = (event) => {
              const data = JSON.parse(event.data);
              
              switch (data.type) {
                case 'welcome':
                  userId = data.userId;
                  addSystemMessage(`Welcome! You are connected as ${username}`);
                  break;
                  
                case 'message':
                  addMessage(data);
                  break;
                  
                case 'system':
                  addSystemMessage(data.content);
                  break;
                  
                case 'users':
                  updateUserList(data.users);
                  break;
              }
            };
            
            ws.onclose = () => {
              isConnected = false;
              statusEl.textContent = 'Disconnected. Reconnecting...';
              statusEl.style.background = '#ffebee';
              
              // Attempt to reconnect after a delay
              setTimeout(connect, 3000);
            };
            
            ws.onerror = (error) => {
              console.error('WebSocket error:', error);
              statusEl.textContent = 'Connection error';
              statusEl.style.background = '#ffebee';
            };
          }
          
          // Add a message to the chat
          function addMessage(data) {
            const messageEl = document.createElement('div');
            const isSelf = data.userId === userId;
            
            messageEl.className = `message ${isSelf ? 'self' : 'user'}`;
            
            const timestamp = new Date(data.timestamp).toLocaleTimeString();
            
            messageEl.innerHTML = `
              <span class="username">${data.username}</span>
              <span class="content">${escapeHtml(data.content)}</span>
              <div class="timestamp">${timestamp}</div>
            `;
            
            messagesEl.appendChild(messageEl);
            scrollToBottom();
          }
          
          // Add a system message
          function addSystemMessage(content) {
            const messageEl = document.createElement('div');
            messageEl.className = 'message system';
            messageEl.textContent = content;
            
            messagesEl.appendChild(messageEl);
            scrollToBottom();
          }
          
          // Update the list of online users
          function updateUserList(users) {
            userListEl.innerHTML = '';
            
            users.forEach(user => {
              const userEl = document.createElement('div');
              userEl.className = 'user-list-item';
              userEl.textContent = user.username;
              
              if (user.id === userId) {
                userEl.textContent += ' (you)';
                userEl.style.background = '#e8f5e9';
              }
              
              userListEl.appendChild(userEl);
            });
          }
          
          // Send a chat message
          function sendMessage() {
            const content = messageInput.value.trim();
            
            if (!content || !isConnected) return;
            
            const message = {
              type: 'message',
              content
            };
            
            ws.send(JSON.stringify(message));
            messageInput.value = '';
          }
          
          // Send a control message
          function sendControlMessage(type, data) {
            if (!isConnected) return;
            
            const message = {
              type,
              ...data
            };
            
            ws.send(JSON.stringify(message));
          }
          
          // Set username
          function setUsername() {
            const newUsername = usernameInput.value.trim();
            
            if (!newUsername) return;
            
            username = newUsername;
            
            if (isConnected) {
              sendControlMessage('username', { username });
            }
          }
          
          // Escape HTML to prevent XSS
          function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
          }
          
          // Scroll to the bottom of the messages
          function scrollToBottom() {
            messagesEl.scrollTop = messagesEl.scrollHeight;
          }
          
          // Event listeners
          sendButton.addEventListener('click', sendMessage);
          
          messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
          });
          
          setUsernameButton.addEventListener('click', setUsername);
          
          usernameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') setUsername();
          });
          
          // Connect on page load
          connect();
        </script>
      </body>
    </html>
  `);
});

// WebSocket handler
app.ws("/ws", (ws) => {
  ws.on("connection", (socket, request) => {
    // Assign a unique ID to this client
    const userId = String(userIdCounter++);
    let username = `Guest${userId}`;
    
    // Add to clients map
    clients.set(userId, { socket, username });
    
    console.log(`Client connected: ${userId} (${username})`);
    
    // Send welcome message
    socket.send(JSON.stringify({
      type: "welcome",
      userId
    }));
    
    // Broadcast user list to all clients
    broadcastUserList();
    
    // Handle incoming messages
    socket.on("message", (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        switch (message.type) {
          case "message":
            // Broadcast chat message to all clients
            broadcastMessage(userId, username, message.content);
            break;
            
          case "join":
            // Handle user joining with initial username
            if (message.username) {
              username = message.username;
              clients.set(userId, { socket, username });
              broadcastSystemMessage(`${username} has joined the chat`);
              broadcastUserList();
            }
            break;
            
          case "username":
            // Handle username change
            if (message.username) {
              const oldUsername = username;
              username = message.username;
              clients.set(userId, { socket, username });
              broadcastSystemMessage(`${oldUsername} is now known as ${username}`);
              broadcastUserList();
            }
            break;
        }
      } catch (error) {
        console.error("Error processing message:", error);
      }
    });
    
    // Handle client disconnect
    socket.on("close", () => {
      console.log(`Client disconnected: ${userId} (${username})`);
      
      // Remove from clients map
      clients.delete(userId);
      
      // Broadcast user list update
      broadcastSystemMessage(`${username} has left the chat`);
      broadcastUserList();
    });
  });
});

// Broadcast a chat message to all clients
function broadcastMessage(userId, username, content) {
  const message = {
    type: "message",
    userId,
    username,
    content,
    timestamp: Date.now()
  };
  
  const messageStr = JSON.stringify(message);
  
  for (const client of clients.values()) {
    client.socket.send(messageStr);
  }
}

// Broadcast a system message to all clients
function broadcastSystemMessage(content) {
  const message = {
    type: "system",
    content,
    timestamp: Date.now()
  };
  
  const messageStr = JSON.stringify(message);
  
  for (const client of clients.values()) {
    client.socket.send(messageStr);
  }
}

// Broadcast the current user list to all clients
function broadcastUserList() {
  const users = Array.from(clients.entries()).map(([id, client]) => ({
    id,
    username: client.username
  }));
  
  const message = {
    type: "users",
    users
  };
  
  const messageStr = JSON.stringify(message);
  
  for (const client of clients.values()) {
    client.socket.send(messageStr);
  }
}

// Start the server
app.listen(3000, () => {
  console.log("SmashHono WebSocket chat server is running on http://localhost:3000");
});
